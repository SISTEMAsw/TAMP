define(["backbone.marionette","globals","jquery","underscore"],function(a,b,c,d){"use strict";var e=a.View.extend({cacheViewerInstance:!0,_selectedLayers:{},onStartup:function(a){console.error("[BaseView::onStartup] IMPLEMENT IN DERIVED OBJECT!")},initialize:function(a){if(this.isClosed=!0,this.isEmpty=!0,this.emtpyViewIsActive=!1,d.isFunction(this.onResize)&&(this.onResizeF=this.onResize.bind(this)),"undefined"==typeof a.context)throw'[BaseView::initialize] "context" property has to be set in the options! If no context is needed for the view set it to "null"';this.legacyContext=function(){return a.context}},selectedLayers:function(){return this._selectedLayers},_setupVMANIPContext:function(){this.listenTo(this.legacyContext(),"map:layer:change",this._onLayerChangeBase)},_onLayerChangeBase:function(a){var b=this.getModelForLayer(a.name,a.isBaseLayer);if(!b)return void console.log("[BaseView::_onLayerChangeBase] no model found for "+a.name);var c=null,e=null;d.isFunction(this.supportsLayer)?e=[this.supportsLayer(b)]:(c=b,e=b.get("views")),e.length&&(a.visible?(this._selectedLayers[b.get("name")]={model:b,views:e,isBaseLayer:a.isBaseLayer},this.onLayerAdd(b,a.isBaseLayer,e),console.log("[VirtualGlobeView::onLayerChange] selected "+b.get("name"))):(delete this._selectedLayers[b.get("name")],this.onLayerRemove(b,a.isBaseLayer,e),console.log("[VirtualGlobeView::onLayerChange] deselected "+b.get("name"))))},onShow:function(){return this.isClosed&&(d.isFunction(this.didInsertElement)&&(this._setupVMANIPContext(),this.didInsertElement()),this.onResizeF&&c(window).resize(this.onResizeF),this.isClosed=!1),this.isEmpty?(d.isFunction(this.showEmptyView)&&this.showEmptyView(),void(this.emtpyViewIsActive=!0)):void(this.emtpyViewIsActive&&(d.isFunction(this.hideEmptyView)&&this.hideEmptyView(),this.emtpyViewIsActive=!1))},onClose:function(){d.isFunction(this.didRemoveElement)||this.didRemoveElement(),this.onResizeF&&c(window).off("resize",this.onResizeF),this.cacheViewerInstance||(this.viewer&&(d.isFunction(this.viewer.destroy)?this.viewer.destroy():console.error('[BaseView::onClose] The "viewer" object does not provide a "destroy" function, but "cacheViewerInstance" is set to false. The "viewer" property will only be set to "undefined"'),this.viewer=void 0),this.isEmpty=!0),this.isClosed=!0},enableEmptyView:function(a){this.isEmpty=a},setViewer:function(a){this.viewer=a},getViewer:function(){return this.viewer},getModelsForSelectedLayers:function(a){var c={};return b.baseLayers.each(function(b){b.get("visible")&&("undefined"!=typeof a?a(b)&&(c[b.get("name")]={model:b,type:"baselayer"}):c[b.get("name")]={model:b,type:"baselayer"})}),b.products.each(function(b){b.get("visible")&&("undefined"!=typeof a?a(b)&&(c[b.get("name")]={model:b,type:"product"}):c[b.get("name")]={model:b,type:"product"})}),b.overlays.each(function(b){b.get("visible")&&("undefined"!=typeof a?a(b)&&(c[b.get("name")]={model:b,type:"overlay"}):c[b.get("name")]={model:b,type:"overlay"})}),c},getModelForLayer:function(a,c){var d=void 0;if(c?d=b.baseLayers.find(function(b){return b.get("name")===a}):(d=b.products.find(function(b){return b.get("name")===a}),d||(d=b.overlays.find(function(b){return b.get("name")===a}))),"undefined"==typeof d)throw Error("[BaseView::getModelForLayer] Product "+a+" is unknown!");return d},_addInitialLayer:function(a,b){this._selectedLayers[a.get("name")]={model:a,isBaseLayer:b}},_setLayersFromAppContext:function(){this._selectedLayers={},b.baseLayers.each(function(a){a.get("visible")&&this._addInitialLayer(a,!0)}.bind(this)),b.products.each(function(a){a.get("visible")&&(console.log("model: "+a.get("name")+" / state: "+a.get("visible")),this._addInitialLayer(a,!1))}.bind(this)),b.overlays.each(function(a){a.get("visible")&&this._addInitialLayer(a,!1)}.bind(this)),this.onStartup(this._selectedLayers)}});return e});